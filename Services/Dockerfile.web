# Build stage
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

# Copy solution file
COPY SpotifyStatistics.sln ./

# Copy project files
COPY Gavinhow.SpotifyStatistics.Web/Gavinhow.SpotifyStatistics.Web.csproj Gavinhow.SpotifyStatistics.Web/
COPY Gavinhow.SpotifyStatistics.Api/Gavinhow.SpotifyStatistics.Api.csproj Gavinhow.SpotifyStatistics.Api/
COPY Gavinhow.SpotifyStatistics.Database/Gavinhow.SpotifyStatistics.Database.csproj Gavinhow.SpotifyStatistics.Database/
COPY Gavinhow.SpotifyStatistics.Database.Entity/Gavinhow.SpotifyStatistics.Database.Entity.csproj Gavinhow.SpotifyStatistics.Database.Entity/

# Restore dependencies
RUN dotnet restore Gavinhow.SpotifyStatistics.Web/Gavinhow.SpotifyStatistics.Web.csproj

# Copy source code
COPY . .

# Build the application
RUN dotnet build Gavinhow.SpotifyStatistics.Web/Gavinhow.SpotifyStatistics.Web.csproj -c Release -o /app/build

# Publish the application
RUN dotnet publish Gavinhow.SpotifyStatistics.Web/Gavinhow.SpotifyStatistics.Web.csproj -c Release -o /app/publish --no-restore

# Runtime stage
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime
WORKDIR /app

# Install curl for healthcheck
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Copy published app
COPY --from=build /app/publish .

# Create non-root user
RUN groupadd -r spotifyapp && useradd -r -g spotifyapp spotifyapp
RUN chown -R spotifyapp:spotifyapp /app
USER spotifyapp

# Health check endpoint
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

EXPOSE 8080
ENTRYPOINT ["dotnet", "Gavinhow.SpotifyStatistics.Web.dll"]