name: 'Backend Deploy'
on:
  workflow_call:
    inputs:
      environment:
        description: 'The environment to deploy to'
        required: true
        type: string
      tf_version:
        description: 'The version of Terraform to use'
        required: false
        default: 'latest'
        type: string
      tg_version:
        description: 'The version of Terragrunt to use'
        required: false
        default: 'latest'
        type: string
      tf_working_dir:
        description: 'The working directory for Terraform'
        required: true
        type: string

jobs:
  deploy:
    name: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      TF_VAR_postgres_connection: ${{ secrets.POSTGRES_CONNECTION }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false
      ARM_USE_CLI: false
      TERRAGRUNT_AUTO_INIT: false
      TERRAGRUNT_LOG_LEVEL: error
    steps:
      # Terraform deployment
      - uses: actions/download-artifact@v4
        with:
          name: terraform
          path: ./infrastructure
      - name: 'Init'
        uses: the-commons-project/terragrunt-github-actions@master
        with:
          tf_actions_version: ${{ inputs.tf_version }}
          tg_actions_version: ${{ inputs.tg_version }}
          tf_actions_binary: "terragrunt"
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ${{ inputs.tf_working_dir }}
      - name: 'Apply'
        uses: the-commons-project/terragrunt-github-actions@master
        with:
          tf_actions_version: ${{ inputs.tf_version }}
          tg_actions_version: ${{ inputs.tg_version }}
          tf_actions_binary: "terragrunt"
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: ${{ inputs.tf_working_dir }}
      - name: 'Output'
        id: output
        uses: the-commons-project/terragrunt-github-actions@master
        with:
          tf_actions_version: ${{ inputs.tf_version }}
          tg_actions_version: ${{ inputs.tg_version }}
          tf_actions_binary: "terragrunt"
          tf_actions_subcommand: 'output'
          tf_actions_working_dir: ${{ inputs.tf_working_dir }}

      - name: Set Function App name as Environment Variable
        run: |
          echo "APP_NAME=${{ fromJson(steps.output.outputs.tf_actions_output).backend.value.name }}" >> $GITHUB_ENV
          echo "APP_RESOURCE_GROUP=${{ fromJson(steps.output.outputs.tf_actions_output).backend.value.resource_group_name }}" >> $GITHUB_ENV

      # Azure App Service Deployment
      - uses: actions/download-artifact@v4
        with:
          name: spotify_statistics_web
          path: ./azure_app

      - uses: Azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

      - name: Get Publish Profile
        run: |
          echo "PUBLISH_PROFILE=$(az webapp deployment list-publishing-profiles -g '${{ env.APP_RESOURCE_GROUP }}' -n '${{ env.APP_NAME }}' --xml)" >> $GITHUB_OUTPUT
        id: getPublishProfile

      - name: Azure WebApp
        uses: Azure/webapps-deploy@v2
        with:
          app-name: ${{ env.APP_NAME }}
          publish-profile: ${{ steps.getPublishProfile.outputs.PUBLISH_PROFILE }}
          package: './azure_app'